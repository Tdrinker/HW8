#    calc40.ums
#
#    Purpose: contains calculator-related functions.
#
#    By: Ge Gao, Ari Brown
#
#    Treat r4 as the boolean value: 0 if in waiting state
#                                   1 if in entering state

	.zero r0
	.temps r6, r7
	.section rodata
	jumptable:
	.space 256

//************************* initialize the jump table ************************//
	.section init
init_table:
	output "start initializing jumptable\n"
	push r3 on stack r2               // saves non-volatile pointer r3
	push r4 on stack r2               // saves non-volatile pointer r4
	r3 := 0                           // r3 holds the current table index
	output "continue initializing jumptable\n"

init_table_loop:
	r4 := jumptable + r3              // r4 holds the position in the table
	m[r0][r4] := input_error          // initialize current bucket to error
	r3 := r3 + 1                      // update current table index
	r5 := 256 - r3                    // keep initializing while not at 
	if (r5 != 0) goto init_table_loop // the end of the table

	pop r4 off stack r2               // restore r4
	pop r3 off stack r2               // restore r3



//***************** Commands Specifications and Initializations **************//
	.section init
init_commands:
	m[r0][jumptable + '0'] := digit   // initialize 0 in jumptable
	m[r0][jumptable + '1'] := digit   // initialize 1 in jumptable
	m[r0][jumptable + '2'] := digit   // initialize 2 in jumptable
	m[r0][jumptable + '3'] := digit   // initialize 3 in jumptable
	m[r0][jumptable + '4'] := digit   // initialize 4 in jumptable
	m[r0][jumptable + '5'] := digit   // initialize 5 in jumptable
	m[r0][jumptable + '6'] := digit   // initialize 6 in jumptable
	m[r0][jumptable + '7'] := digit   // initialize 7 in jumptable
	m[r0][jumptable + '8'] := digit   // initialize 8 in jumptable
	m[r0][jumptable + '9'] := digit   // initialize 9 in jumptable


	m[r0][jumptable + ' '] := waiting // initialize SPACE in jumptable
	m[r0][jumptable + '*'] := mul     // initialize multiply in jumptable
	m[r0][jumptable + '+'] := add     // initialize add in jumptable



//************************ calculator related macros *************************//
	.section text
main:
	goto waiting                      // start program with waiting state

input_error:
	output "invalid input character\n"   
	goto waiting                      // go back waiting state after error

waiting:
	r1 := input()                     
	r4 := 0                           // indicate in the waiting state
	goto recognize_input

recognize_input:
	r5 := jumptable + r1              // retrieve the position in the table
	r5 := m[r0][r5]						 
	goto r5                           // execute the instruction


	.temps r5,r6,r7                   // starting treat r5,r6,r7 as temps

digit:
	if (r4 == 1) goto append_digit     
	push r1 on stack r2               // push the current digit on stack  
	r4 := 1                           // indicate in the entering state
	goto entering                     

entering:
	r1 := input()                     
	goto recognize_input
 
append_digit:
	pop r3 off stack r2
	r3 := r3 * 10
	r1 := r1 + r3
	push r1 on stack r2
	goto entering

mul:
    output "multiply\n"
    halt
add:
	output "add\n"
	halt








